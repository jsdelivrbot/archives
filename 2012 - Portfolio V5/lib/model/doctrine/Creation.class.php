<?php

/**
 * Creation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    foliov4
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Creation extends BaseCreation
{
  
  private $crea_suivante = null;
  private $crea_precedente = null;
  
  /**
   * Retourne l'url de la miniature
   * @see trunk/lib/model/doctrine/base/BaseCreation#getMiniature()
   */
  public function getMiniature()
  {
    if (Toolbox::isRawDump()) return $this->_get('miniature');
    
    $base = '/uploads/folio/min/';
    $min = ($this->_get('miniature')!='') ? $this->_get('miniature') : 'vierge.png';
    
    return $base.$min;
  }
  
  public function getBandeau()
  {
    if (Toolbox::isRawDump()) return $this->_get('bandeau');
   
    $base = '/uploads/folio/bandeau/';
    $min = $this->_get('bandeau');
    
    if (empty($min) ) return null;
    
    return $base.$min;
    
  }
  
  public function __toString()
  {
    return $this->getTitre();
  }

  public function getCreaSuivante()
  {
    if ($this->crea_suivante === null)
    {
      $this->crea_suivante = CreationTable::getInstance()->createQuery('c')
        ->where('(c.date > ?)', $this->getDate())
        ->orderBy('c.date ASC')
        ->limit(1)
        ->fetchOne();
    }
    return $this->crea_suivante;
  }
  
  public function getCreaPrecedente()
  {
    if ($this->crea_precedente === null)
    {
      $this->crea_precedente = CreationTable::getInstance()->createQuery('c')
        ->where('c.date < ? ', $this->getDate())
        ->orderBy('c.date DESC')
        ->limit(1)
        ->fetchOne();
        
    }
    return $this->crea_precedente;
  }  
  
  public function hasCreaSuivante()
  {
    return $this->getCreaSuivante()!==false;
  }

  public function hasCreaPrecedente()
  {
    return $this->getCreaPrecedente()!==false;
  }
  
  
  public function getImages()
  {
    $dossier = '/uploads/folio/_'.$this->getCode().'/';
    $fichiers = Toolbox::scanDirectory($dossier, array('.jpg', '.png', '.jpeg'));
    
    $images = array();
    foreach ($fichiers as $fichier){
      $images[] = new Image($fichier[0], $fichier[1], $this);
    }
    
    return $images;
  }
  
  
}